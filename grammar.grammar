primary_expression
    : Identifier
    | IntegerConstant
    | FloatingPointConstant
    | ParenthisOpen expression ParenthisClose
    ;

// for arrays, pointers n structs
postfix_expression
    : primary_expression
    | postfix_expression BracketOpen expression BracketClose
    | postfix_expression ParenthisOpen ParenthisClose
    | postfix_expression ParenthisOpen argument_expression_list ParenthisClose
    | postfix_expression Dot Identifier
    | postfix_expression StructAccessor Identifier
    | postfix_expression Increment
    | postfix_expression Decrement
    ;

// passing params
argument_expression_list
    : assignment_expression
    | argument_expression_list Comma assignment_expression
    ;

unary_expression
    : postfix_expression
    | Increment unary_expression
    | Decrement unary_expression
    | unary_operator unary_expression
    ;

unary_operator
    : And
    | Product
    | Plus
    | Minus
    | Negate
    | LogicalNot
    ;

multiplicative_expression
    : unary_expression
    | multiplicative_expression Product unary_expression
    | multiplicative_expression Division unary_expression
    | multiplicative_expression Module unary_expression
    ;

additive_expression
    : multiplicative_expression
    | additive_expression Plus multiplicative_expression
    | additive_expression Minus multiplicative_expression
    ;

shift_expression
    : additive_expression
    | shift_expression ShiftLeft additive_expression
    | shift_expression ShiftRight additive_expression
    ;

relational_expression
    : shift_expression
    | relational_expression Less shift_expression
    | relational_expression Greater shift_expression
    | relational_expression LessOrEqual shift_expression
    | relational_expression GreaterOrEqual shift_expression
    ;

equality_expression
	: relational_expression
	| equality_expression Equals relational_expression
	| equality_expression NotEquals relational_expression
	;

and_expression
	: equality_expression
	| and_expression And equality_expression
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression Xor and_expression
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression Or exclusive_or_expression
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression LogicalAnd inclusive_or_expression
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression LogicalOr logical_and_expression
	;

assignment_expression
	: logical_or_expression
	| unary_expression assignment_operator assignment_expression
	;

assignment_operator
	: Assign
	| ProductAssign
	| DivisionAssign
	| ModuleAssign
	| PlusAssign
	| MinusAssign
	| LeftAssign
	| RightAssign
	;

expression
    : assignment_expression
    | expression Comma assignment_expression
    ;

constant_expression
    : logical_or_expression
    ;

declaration
	: declaration_specifiers SemiCollon
	| declaration_specifiers init_declarator_list SemiCollon
	;

declaration_specifiers
	: type_specifier
	| type_specifier declaration_specifiers
    ;

init_declarator_list
	: init_declarator
	| init_declarator_list Comma init_declarator
	;

init_declarator
	: declarator
	| declarator Assign initializer
	;

type_specifier
	: Void
	| primitive_type_specifier
	| unsigned_specifier
	| struct_specifier
	;

primitive_type_specifier
    : Char
	| Int
	| Float
	| Double
	| long_int_specifier
    ;

long_int_specifier
    : Long long_int_specifier
    | Long Int
    ;

unsigned_specifier
    : Unsigned primitive_type_specifier
    ;

struct_specifier
	: Struct Identifier BraceOpen struct_declaration_list BraceClose
	| Struct Identifier
	| Struct BraceOpen struct_declaration_list BraceClose
	;

struct_declaration_list
	: struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	: specifier_list struct_declarator_list SemiCollon
	;

specifier_list
	: type_specifier specifier_list
	| type_specifier
    ;

struct_declarator_list
	: struct_declarator
	| struct_declarator_list Comma struct_declarator
	;

struct_declarator
	: declarator
	| Collon constant_expression
	| declarator Collon constant_expression
	;

declarator
	: pointer direct_declarator
	| direct_declarator
	;

direct_declarator
	: Identifier //in
	| ParenthisOpen declarator ParenthisClose
	| direct_declarator BracketOpen constant_expression BracketClose
	| direct_declarator BracketOpen BracketClose
	| direct_declarator ParenthisOpen parameter_type_list ParenthisClose
	| direct_declarator ParenthisOpen identifier_list ParenthisClose
	| direct_declarator ParenthisOpen ParenthisClose
	;

parameter_type_list
	: parameter_list
	| parameter_list Comma Ellipsis
	;

pointer
	: Product pointer
	| Product
	;

parameter_list
	: parameter_declaration
	| parameter_list Comma parameter_declaration
	;

parameter_declaration
	: declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	;

identifier_list
	: Identifier
	| identifier_list Comma Identifier
	;

type_name
	: specifier_list
	| specifier_list abstract_declarator
	;

abstract_declarator
	: pointer
	| direct_abstract_declarator
	| pointer direct_abstract_declarator
	;

direct_abstract_declarator
	: ParenthesisOpen abstract_declarator ParenthesisClose
	| BracketOpen BracketClose
	| BracketOpen constant_expression BracketClose
	| direct_abstract_declarator BracketOpen BracketClose
	| direct_abstract_declarator BracketOpen constant_expression BracketClose
	| ParenthesisOpen ParenthesisClose
	| ParenthesisOpen parameter_type_list ParenthesisClose
	| direct_abstract_declarator ParenthesisOpen ParenthesisClose
	| direct_abstract_declarator ParenthesisOpen parameter_type_list ParenthesisClose
	;

initializer
	: assignment_expression
	| BraceOpen initializer_list BraceClose
	| BraceOpen initializer_list Comma BraceClose
	;

initializer_list
	: initializer
	| initializer_list Comma initializer
	;

statement
	: labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	: identifier Collon statement // in obs
	| Case constant_expression Collon statement
	| Default Collon statement
	;

compound_statement
	: BraceOpen BraceClose
	| BraceOpen statement_list BraceClose
	| BraceOpen declaration_list BraceClose
	| BraceOpen declaration_list statement_list BraceClose
	;

declaration_list
	: declaration
	| declaration_list declaration
	;

statement_list
	: statement
	| statement_list statement
	;

expression_statement
	: SemiCollon
	| expression SemiCollon
	;

selection_statement
	: If expression_statement_structure
	| If expression_statement_structure Else statement
	| Switch expression_statement_structure
	;

expression_statement_structure
    : ParenthesisOpen expression ParenthesisClose statement
    ;

iteration_statement
	: While expression_statement_structure
	| Do statement While ParenthesisOpen expression ParenthesisClose SemiCollon
	| For ParenthesisOpen expression_statement expression_statement ParenthesisClose statement
	| For ParenthesisOpen expression_statement expression_statement expression ParenthesisClose statement
	;

jump_statement
	: Continue SemiCollon
	| Break SemiCollon
	| Return SemiCollon
	| Return expression SemiCollon
	;

external_declaration
	: function_definition
	| declaration
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	| declarator declaration_list compound_statement
	| declarator compound_statement
	;