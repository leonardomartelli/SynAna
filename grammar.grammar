primary_expression
    : Identifier
    | IntegerConstant
    | FloatingPointConstant
	| CharConstant
    | ParenthisOpen expression ParenthisClose
    ;

postfix_expression
    : primary_expression postfix_expression_line	
    ;

postfix_expression_line
    : BracketOpen expression BracketClose postfix_expression_line
	| ParenthisOpen ParenthisClose postfix_expression_line
	| ParenthisOpen argument_expression_list ParenthisClose postfix_expression_line
	| Dot Identifier postfix_expression_line
	| StructAccessor Identifier postfix_expression_line
	| Increment postfix_expression_line
	| Decrement postfix_expression_line
	| empty
	;

argument_expression_list
    : assignment_expression argument_expression_list_line
    ;

argument_expression_list_line
    : Comma assignment_expression argument_expression_list_line
	| empty
	;

unary_expression
    : postfix_expression
    | Increment unary_expression
    | Decrement unary_expression
    | unary_operator unary_expression
    ;

unary_operator
    : And
    | Product
    | Plus
    | Minus
    | Negate
    | LogicalNot
    ;

multiplicative_expression
    : Product unary_expression multiplicative_expression_line
    | Division unary_expression multiplicative_expression_line
    | Module unary_expression multiplicative_expression_line
    ;

multiplicative_expression_line
	: unary_expression multiplicative_expression_line
	| empty
	;


additive_expression
    : multiplicative_expression additive_expression_line
    ;

additive_expression_line
        : Plus multiplicative_expression additive_expression_line
        | Minus multiplicative_expression additive_expression_line
	| empty
	;

shift_expression
    : additive_expression shift_expression_line
    ;

shift_expression_line
	: ShiftLeft additive_expression shift_expression_line
        | ShiftRight additive_expression shift_expression_line
	| empty
	;

relational_expression
    : shift_expression  relational_expression_line
    ;

relational_expression_line
	: Less shift_expression relational_expression_line
        | Greater shift_expression relational_expression_line
        | LessOrEqual shift_expression relational_expression_line
        | GreaterOrEqual shift_expression relational_expression_line
	| empty
	;

equality_expression
	: relational_expression equality_expression_line
	;

equality_expression_line
	: Equals relational_expression equality_expression_line
	| NotEquals relational_expression equality_expression_line
	| empty
	;

and_expression
    : equality_expression and_expression_line
	;

and_expression_line
	: And equality_expression and_expression_line
	| empty
	;

exclusive_or_expression
	: and_expression exclusive_or_expression_line
	;

exclusive_or_expression_line
	: Xor and_expression exclusive_or_expression_line
	| empty
	;

inclusive_or_expression
        : exclusive_or_expression inclusive_or_expression_line
	;

inclusive_or_expression_line
	: Or excluivse_or_expression inclusive_or_expression_line	
	| empty
	;
	

logical_and_expression
        : inclusive_or_expression logical_and_expression_line
	;

logical_and_expression_line
	: LogicalAnd inclusive_or_expression logical_and_expression_line	
	| empty
	;

logical_or_expression
	: logical_and_expression logical_or_expression_line
	;

logical_or_expression_line
	: LogicalOr logical_and_expression logical_or_expression_line	
	| empty
	;

assignment_expression
	: unary_expression assignment_operator logical_or_expression
	| unary_expression assignment_operator assingment_expression
	;

assignment_operator
	: Assign
	| ProductAssign
	| DivisionAssign
	| ModuleAssign
	| PlusAssign
	| MinusAssign
	| LeftAssign
	| RightAssign
	;

expression
    : assignment_expression
    | expression Comma assignment_expression
    ;


declaration
	: declaration_specifiers SemiCollon
	| declaration_specifiers init_declarator_list SemiCollon
	;

declaration_specifiers
	: type_specifier
	| type_specifier declaration_specifiers
    ;

init_declarator_list
	: init_declarator init_declarator_list_line
	;

init_declarator_list_line
	: Comma init_declarator init_declarator_list_line	
	| empty
	;

init_declarator
	: declarator
	| declarator Assign initializer
	;

type_specifier
	: Void
	| primitive_type_specifier
	| unsigned_specifier
	| struct_specifier
	;

primitive_type_specifier
    : Char
	| Int
	| Float
	| Double
	| long_int_specifier
    ;

long_int_specifier
    : Long long_int_specifier
    | Long Int
    ;

unsigned_specifier
    : Unsigned primitive_type_specifier
    ;

struct_specifier
	: Struct Identifier BraceOpen struct_declaration_list BraceClose
	| Struct Identifier
	| Struct BraceOpen struct_declaration_list BraceClose
	;

struct_declaration_list
	: struct_declaration
	| struct_declaration struct_declaration_list
	;

struct_declaration
	: specifier_list struct_declarator_list SemiCollon
	;

specifier_list
	: type_specifier specifier_list
	| type_specifier
    ;

struct_declarator_list
	: struct_declarator struct_declarator_list_line
	;

struct_declarator_list_line
	: Comma struct_declarator struct_declarator_list_line
	| empty
	;

struct_declarator
	: declarator
	| Collon logical_or_expression
	| declarator Collon logical_or_expression
	;

declarator
	: pointer direct_declarator
	| direct_declarator
	;

direct_declarator
	: Identifier direct_declarator_line
	| ParenthisOpen declarator ParenthisClose direct_declarator_line
	;

direct_declarator_line
	: BracketOpen logical_or_expression BracketClose direct_declarator_line
	| BracketOpen BracketClose direct_declarator_line
	| ParenthisOpen parameter_type_list ParenthisClose direct_declarator_line
	| ParenthisOpen identifier_list ParenthisClose direct_declarator_line
	| ParenthisOpen ParenthisClose direct_declarator_line
	| empty
	;

parameter_type_list
	: parameter_list
	| parameter_list Comma Ellipsis
	;

pointer
	: Product pointer
	| Product
	;

parameter_list
	: parameter_declaration parameter_list_line
	;

parameter_list_line
	: Comma parameter_declaration parameter_list_line
	| empty
	;

parameter_declaration
	: declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	;

identifier_list
	: Identifier identifier_list_line
	;

identifier_list_line
	: Comma Identifier identifier_list_line
	| empty
	;

type_name
	: specifier_list
	| specifier_list abstract_declarator
	;

abstract_declarator
	: pointer
	| direct_abstract_declarator
	| pointer direct_abstract_declarator
	;

direct_abstract_declarator
	: ParenthesisOpen abstract_declarator ParenthesisClose direct_abstract_declarator_line
	| BracketOpen BracketClose direct_abstract_declarator_line
	| BracketOpen logical_or_expression BracketClose direct_abstract_declarator_line
	| ParenthesisOpen ParenthesisClose direct_abstract_declarator_line
	| ParenthesisOpen parameter_type_list ParenthesisClose direct_abstract_declarator_line
	;

direct_abstract_declarator_line
	: BracketOpen BracketClose direct_abstract_declarator_line
	| BracketOpen logical_or_expression BracketClose direct_abstract_declarator_line
	| ParenthesisOpen ParenthesisClose direct_abstract_declarator_line
	| ParenthesisOpen parameter_type_list ParenthesisClose direct_abstract_declarator_line
	| empty
	;
	
initializer
	: assignment_expression
	| BraceOpen initializer_list BraceClose
	| BraceOpen initializer_list Comma BraceClose
	;

initializer_list
	: initializer initializer_list_line
	;

initializer_list_line
	: Comma initializer initializer_list_line
	| empty
	;

statement
	: labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	: identifier Collon statement 
	| Case logical_or_expression Collon statement
	| Default Collon statement
	;

compound_statement
	: BraceOpen compound_body_list BraceClose
	;

compound_body
	: statement_list
	| declaration_list
	| empty
	;

compound_body_list
	: compound_body compund_body_list
	| compound_body
	;

declaration_list
	: declaration declaration_list_line
	;

declaration_list_line
	: declaration declaration_list_line
	| empty
	;

statement_list
	: statement statement_list_line
	;

statement_list_line
	: statement statement_list_line
	| empty
	;

expression_statement
	: SemiCollon
	| expression SemiCollon
	;

selection_statement
	: If expression_statement_structure
	| If expression_statement_structure Else statement
	| Switch expression_statement_structure
	;

expression_statement_structure
    : ParenthesisOpen expression ParenthesisClose statement
    ;

iteration_statement
	: While expression_statement_structure
	| Do statement While ParenthesisOpen expression ParenthesisClose SemiCollon
	| For ParenthesisOpen expression_statement expression_statement ParenthesisClose statement
	| For ParenthesisOpen expression_statement expression_statement expression ParenthesisClose statement
	;

jump_statement
	: Continue SemiCollon
	| Break SemiCollon
	| Return SemiCollon
	| Return expression SemiCollon
	;

external_declaration
	: function_definition
	| declaration
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	| declarator declaration_list compound_statement
	| declarator compound_statement
	;